# Code generated by oto; DO NOT EDIT.

import requests
import json

class Client:
	"""Client provides access to the Firesearch API."""

	def __init__(self, endpoint="http://localhost:8888/api", apiKey=""):
		self.endpoint = endpoint
		self.apiKey = apiKey
		if self.endpoint == "":
			raise FieldError(field="endpoint", message="endpoint missing")
		if self.apiKey == "":
			raise FieldError(field="apiKey", message="apiKey missing")

<%= for (service) in def.Services { %>class <%= service.Name %>:
	"""<%= format_comment_line(service.Comment) %>"""

	def __init__(self, client):
		self.client = client
	<%= for (method) in service.Methods { %>
	def <%= method.NameLowerCamel %>(<%= method.InputObject.ObjectNameLowerCamel %>):
		"""<%= format_comment_line(method.Comment) %>"""
		url = "{}/<%= service.Name %>.<%= method.Name %>".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=<%= method.InputObject.ObjectNameLowerCamel %>, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	<% } %>
<% } %>

<%= for (object) in def.Objects { %>
class <%= object.Name %>:
	"""<%= format_comment_line(object.Comment) %>
	Attributes
	----------
	<%= for (field) in object.Fields {  %>
	<%= field.NameLowerCamel %>
		<%= format_comment_line(field.Comment) %>
	<% } %>
	"""

	def __init__(self):
		<%= for (field) in object.Fields { %>self.<%= field.NameLowerCamel %> = None
		<% } %>	
	def json():
		""""get a JSON representation of this object"""
		return json.dumps(self)

<% } %>

class Error(Exception):
	"""Base class for exceptions in this module."""
	pass

class OtoError(Error):
	"""Exception raised for an error making the request.

	Attributes:
		message -- explanation of the error
	"""

	def __init__(self, message):
		self.message = message

class FieldError(Error):
	"""Exception raised for missing fields.

	Attributes:
		field -- field which the error occurred
		message -- explanation of the error
	"""

	def __init__(self, field, message):
		self.field = field
		self.message = message