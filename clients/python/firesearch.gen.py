# Code generated by oto; DO NOT EDIT.

import requests
import json

class Client:
	"""Client provides access to the Firesearch API."""

	def __init__(self, endpoint="http://localhost:8888/api", apiKey=""):
		self.endpoint = endpoint
		self.apiKey = apiKey
		if self.endpoint == "":
			raise FieldError(field="endpoint", message="endpoint missing")
		if self.apiKey == "":
			raise FieldError(field="apiKey", message="apiKey missing")

class AccessKeyService:
	"""AccessKeyService provides keys needed to perform searches."""

	def __init__(self, client):
		self.client = client
	
	def generateKey(generateKeyRequest):
		"""GenerateKey generates a key for an index path prefix to enable searches. The key expires after 24 hours."""
		url = "{}/AccessKeyService.GenerateKey".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=generateKeyRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
class AutocompleteService:
	"""AutocompleteService provides the ability to create and manage autocomplete indexes, as well as populate them with data, and perform lookups."""

	def __init__(self, client):
		self.client = client
	
	def checkIndexName(checkAutocompleteIndexNameRequest):
		"""CheckIndexName checks to see if an index name is available or not."""
		url = "{}/AutocompleteService.CheckIndexName".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=checkAutocompleteIndexNameRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def checkIndexPath(checkAutocompleteIndexPathRequest):
		"""CheckIndexPath checks to see if an AutocompleteIndexPath is valid for creating an index."""
		url = "{}/AutocompleteService.CheckIndexPath".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=checkAutocompleteIndexPathRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def complete(completeRequest):
		"""Complete performs a search on an AutocompleteIndex."""
		url = "{}/AutocompleteService.Complete".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=completeRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def createIndex(createAutocompleteIndexRequest):
		"""CreateIndex creates a new index."""
		url = "{}/AutocompleteService.CreateIndex".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=createAutocompleteIndexRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def deleteDoc(deleteAutocompleteDocRequest):
		"""DeleteDoc removes a document from an AutocompleteIndex. Once deleted, it will stop appearing in search results."""
		url = "{}/AutocompleteService.DeleteDoc".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=deleteAutocompleteDocRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def deleteIndex(deleteAutocompleteIndexRequest):
		"""DeleteIndex deletes the AutocompleteIndex. All index data, as well as any metadata about this AutocompleteIndex will be completely deleted."""
		url = "{}/AutocompleteService.DeleteIndex".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=deleteAutocompleteIndexRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def getIndex(getAutocompleteIndexRequest):
		"""GetIndex gets an AutocompleteIndex."""
		url = "{}/AutocompleteService.GetIndex".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=getAutocompleteIndexRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def getIndexes(getAutocompleteIndexesRequest):
		"""GetIndexes gets a list of AutocompleteIndexes."""
		url = "{}/AutocompleteService.GetIndexes".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=getAutocompleteIndexesRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def putDoc(putAutocompleteDocRequest):
		"""PutDoc puts a document into an AutocompleteIndex."""
		url = "{}/AutocompleteService.PutDoc".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=putAutocompleteDocRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
class IndexService:
	"""IndexService provides the ability to create and manage full-text indexes, as well as populate them with data, and perform searches."""

	def __init__(self, client):
		self.client = client
	
	def checkIndexName(checkIndexNameRequest):
		"""CheckIndexName checks to see if an index name is available or not."""
		url = "{}/IndexService.CheckIndexName".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=checkIndexNameRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def checkIndexPath(checkIndexPathRequest):
		"""CheckIndexPath checks to see if an IndexPath is valid for creating an index."""
		url = "{}/IndexService.CheckIndexPath".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=checkIndexPathRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def createIndex(createIndexRequest):
		"""CreateIndex creates a new index."""
		url = "{}/IndexService.CreateIndex".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=createIndexRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def deleteDoc(deleteDocRequest):
		"""DeleteDoc removes a document from an Index. Once deleted, it will stop appearing in search results."""
		url = "{}/IndexService.DeleteDoc".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=deleteDocRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def deleteIndex(deleteIndexRequest):
		"""DeleteIndex deletes the Index. All index data, as well as any metadata about this Index will be completely deleted."""
		url = "{}/IndexService.DeleteIndex".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=deleteIndexRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def getIndex(getIndexRequest):
		"""GetIndex gets an Index."""
		url = "{}/IndexService.GetIndex".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=getIndexRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def getIndexes(getIndexesRequest):
		"""GetIndexes gets a list of Indexes."""
		url = "{}/IndexService.GetIndexes".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=getIndexesRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def putDoc(putDocRequest):
		"""PutDoc puts a document into an Index."""
		url = "{}/IndexService.PutDoc".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=putDocRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	
	def search(searchRequest):
		"""Search performs a search on an Index."""
		url = "{}/IndexService.Search".format(self.client.endpoint)
		headers = {
			'Accept': 'application/json; charset=utf8',
			'Content-Type': 'application/json; charset=utf8',
			'X-API-Key': self.client.apiKey,
		}
		r = requests.post(url, json=searchRequest, headers=headers)
		if r.status_code != 200:
			raise OtoError(message="status code: {}".format(r.status_code))
		j = r.json()
		if j.error != "":
			raise OtoError(message=j.error)
		return j
	



class GenerateKeyRequest:
	"""GenerateKeyRequest is the input object for GenerateKey.
	Attributes
	----------
	
	indexPathPrefix
		IndexPathPrefix is the collection path prefix in Firestore to provide access for. For example, if you put the prefix "firesearch/orgs/my-org" you will be able to perform searches on both "firesearch/orgs/my-org/cards" and "firesearch/orgs/my-org/messages" indexes.
	
	"""

	def __init__(self):
		self.indexPathPrefix = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class GenerateKeyResponse:
	"""GenerateKeyResponse is the output object for GenerateKey.
	Attributes
	----------
	
	accessKey
		AccessKey is the string that gets passed to `Search` and `Complete` methods to perform searches. Access keys are valid for 24 hours.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.accessKey = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class Field:
	"""Field is a non-searchable key/value pair that can be filtered at query time.
	Attributes
	----------
	
	key
		Key is the name of the field. Cannot begin with an underscore.
	
	value
		Value is the filterable value of this Field.
	
	"""

	def __init__(self):
		self.key = None
		self.value = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class AutocompleteDoc:
	"""AutocompleteDoc describes a document that can be searched.
	Attributes
	----------
	
	id
		ID is the document identifier.
	
	text
		Text is a string that can be completed via a call to Complete.
	
	fields
		Fields are the filterable fields for this document.
	
	"""

	def __init__(self):
		self.id = None
		self.text = None
		self.fields = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class AutocompleteIndex:
	"""AutocompleteIndex describes a search index.
	Attributes
	----------
	
	indexPath
		IndexPath is the collection path in Firestore for this index. Each index must use a unique path.
	
	name
		Name is an internal human readable name for this index. End users will never see this.
	
	caseSensitive
		CaseSensitive preserves case across this index. By default, all entries and queries are lowercased.
	
	"""

	def __init__(self):
		self.indexPath = None
		self.name = None
		self.caseSensitive = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CheckAutocompleteIndexNameRequest:
	"""CheckAutocompleteIndexNameRequest is the input for CheckAutocompleteIndexPath.
	Attributes
	----------
	
	indexName
		IndexName is the name of the index to check.
	
	"""

	def __init__(self):
		self.indexName = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class ValidationResult:
	"""ValidationResult describes the result of a validation check.
	Attributes
	----------
	
	valid
		Valid indicates whether the validation was successful or not.
	
	message
		Message is a human readable objection, or empty if valid.
	
	"""

	def __init__(self):
		self.valid = None
		self.message = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CheckAutocompleteIndexNameResponse:
	"""CheckAutocompleteIndexNameResponse is the output for CheckAutocompleteIndexName.
	Attributes
	----------
	
	validationResult
		ValidationResult holds the result of the check.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.validationResult = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CheckAutocompleteIndexPathRequest:
	"""CheckAutocompleteIndexPathRequest is the input object for CheckAutocompleteIndexPath.
	Attributes
	----------
	
	indexPath
		
	
	"""

	def __init__(self):
		self.indexPath = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CheckAutocompleteIndexPathResponse:
	"""CheckAutocompleteIndexPathResponse is the output for CheckAutocompleteIndexPath.
	Attributes
	----------
	
	validationResult
		ValidationResult holds the result of the check.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.validationResult = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CompleteQuery:
	"""CompleteQuery describes a search query.
	Attributes
	----------
	
	indexPath
		IndexPath is the path of the index to search.
	
	accessKey
		AccessKey authenticates the request. Get an AccessKey from the AccessKeyService.GenerateKey method.
	
	limit
		Limit is the maximum number of search results to return. Smaller limits are faster.
	
	text
		Text contains a phrase to autocomplete.
	
	"""

	def __init__(self):
		self.indexPath = None
		self.accessKey = None
		self.limit = None
		self.text = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CompleteRequest:
	"""CompleteRequest is the input object for Search.
	Attributes
	----------
	
	query
		Query is the CompleteQuery to perform.
	
	"""

	def __init__(self):
		self.query = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CompleteResponse:
	"""CompleteResponse is the output object for Search.
	Attributes
	----------
	
	query
		Query is the CompleteQuery that generated these results.
	
	hits
		Hits are the search results.
	
	duration
		Duration is the milliseconds that the search took to execute in the server side
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.query = None
		self.hits = None
		self.duration = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CreateAutocompleteIndexRequest:
	"""CreateAutocompleteIndexRequest is the input object for CreateAutocompleteIndex.
	Attributes
	----------
	
	index
		Index is the AutocompleteIndex to create.
	
	"""

	def __init__(self):
		self.index = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CreateAutocompleteIndexResponse:
	"""CreateAutocompleteIndexResponse is the output object for CreateAutocompleteIndex.
	Attributes
	----------
	
	index
		Index is the AutocompleteIndex that was created.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.index = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class DeleteAutocompleteDocRequest:
	"""DeleteAutocompleteDocRequest is the input object for DeleteAutocompleteDoc.
	Attributes
	----------
	
	indexPath
		IndexPath is the AutocompleteIndex to delete from.
	
	id
		ID is the identifier of the document to delete.
	
	"""

	def __init__(self):
		self.indexPath = None
		self.id = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class DeleteAutocompleteDocResponse:
	"""DeleteAutocompleteDocResponse is the output object for DeleteAutocompleteDoc.
	Attributes
	----------
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class DeleteAutocompleteIndexRequest:
	"""DeleteAutocompleteIndexRequest is the input object for DeleteAutocompleteIndex.
	Attributes
	----------
	
	indexPath
		IndexPath is the collection path in Firestore that identifies an AutocompleteIndex.
	
	"""

	def __init__(self):
		self.indexPath = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class DeleteAutocompleteIndexResponse:
	"""DeleteAutocompleteIndexResponse is the output object for DeleteAutocompleteIndex.
	Attributes
	----------
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class GetAutocompleteIndexRequest:
	"""GetAutocompleteIndexRequest is the input object for GetAutocompleteIndex.
	Attributes
	----------
	
	indexPath
		IndexPath is the collection path in Firestore that identifies an AutocompleteIndex.
	
	"""

	def __init__(self):
		self.indexPath = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class GetAutocompleteIndexResponse:
	"""GetAutocompleteIndexResponse is the output object for GetAutocompleteIndex.
	Attributes
	----------
	
	index
		Index is the AutocompleteIndex that was created.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.index = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class GetAutocompleteIndexesRequest:
	"""GetAutocompleteIndexesRequest is the input object for GetAutocompleteIndexes.
	Attributes
	----------
	
	"""

	def __init__(self):
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class GetAutocompleteIndexesResponse:
	"""GetAutocompleteIndexesResponse is the output object for GetAutocompleteIndexes.
	Attributes
	----------
	
	indexes
		Indexes are the indexes managed by this service.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.indexes = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class PutAutocompleteDocRequest:
	"""PutAutocompleteDocRequest is the input object for PutAutocompleteDoc.
	Attributes
	----------
	
	indexPath
		IndexPath is the AutocompleteIndex to put a document to.
	
	doc
		Doc is the document to put.
	
	"""

	def __init__(self):
		self.indexPath = None
		self.doc = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class PutAutocompleteDocResponse:
	"""PutAutocompleteDocResponse is the output object for PutAutocompleteDoc.
	Attributes
	----------
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CheckIndexNameRequest:
	"""CheckIndexNameRequest is the input for CheckIndexPath.
	Attributes
	----------
	
	indexName
		IndexName is the name of the index to check.
	
	"""

	def __init__(self):
		self.indexName = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CheckIndexNameResponse:
	"""CheckIndexNameResponse is the output for CheckIndexName.
	Attributes
	----------
	
	validationResult
		ValidationResult holds the result of the check.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.validationResult = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CheckIndexPathRequest:
	"""CheckIndexPathRequest is the input object for CheckIndexPath.
	Attributes
	----------
	
	indexPath
		
	
	"""

	def __init__(self):
		self.indexPath = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CheckIndexPathResponse:
	"""CheckIndexPathResponse is the output for CheckIndexPath.
	Attributes
	----------
	
	validationResult
		ValidationResult holds the result of the check.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.validationResult = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class Index:
	"""Index describes a search index.
	Attributes
	----------
	
	indexPath
		IndexPath is the collection path in Firestore for this index. Each index must use a unique path.
	
	name
		Name is an internal human readable name for this index. End users will never see this.
	
	language
		Language of the index.
	
	keepStopWords
		KeepStopWords prevents stop words from being removed from this index.
	
	caseSensitive
		CaseSensitive preserves case across this index. By default, all entries and queries are lowercased.
	
	noStem
		NoStem prevents words from being reduced. Only effective if a Language is specified.
	
	"""

	def __init__(self):
		self.indexPath = None
		self.name = None
		self.language = None
		self.keepStopWords = None
		self.caseSensitive = None
		self.noStem = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CreateIndexRequest:
	"""CreateIndexRequest is the input object for CreateIndex.
	Attributes
	----------
	
	index
		Index is the Index to create.
	
	"""

	def __init__(self):
		self.index = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class CreateIndexResponse:
	"""CreateIndexResponse is the output object for CreateIndex.
	Attributes
	----------
	
	index
		Index is the Index that was created.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.index = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class DeleteDocRequest:
	"""DeleteDocRequest is the input object for DeleteDoc.
	Attributes
	----------
	
	indexPath
		IndexPath is the Index to delete from.
	
	id
		ID is the identifier of the document to delete.
	
	"""

	def __init__(self):
		self.indexPath = None
		self.id = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class DeleteDocResponse:
	"""DeleteDocResponse is the output object for DeleteDoc.
	Attributes
	----------
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class DeleteIndexRequest:
	"""DeleteIndexRequest is the input object for DeleteIndex.
	Attributes
	----------
	
	indexPath
		IndexPath is the collection path in Firestore that identifies an Index.
	
	"""

	def __init__(self):
		self.indexPath = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class DeleteIndexResponse:
	"""DeleteIndexResponse is the output object for DeleteIndex.
	Attributes
	----------
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class SearchField:
	"""SearchField is a text field that can be searched.
	Attributes
	----------
	
	key
		Key is the name of the search field. Cannot begin with an underscore.
	
	value
		Value is the searchable text field.
	
	store
		Store tells Firesearch to store this value and return it in the search results. By default, although the field is searchable, the original value is not stored.
	
	"""

	def __init__(self):
		self.key = None
		self.value = None
		self.store = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class Doc:
	"""Doc describes a document that can be searched.
	Attributes
	----------
	
	id
		ID is the document identifier.
	
	searchFields
		SearchFields are the searchable fields for this document.
	
	fields
		Fields are the key/value pairs that make up this document. Fields can be returned in search results, and may be filtered.
	
	"""

	def __init__(self):
		self.id = None
		self.searchFields = None
		self.fields = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class GetIndexRequest:
	"""GetIndexRequest is the input object for GetIndex.
	Attributes
	----------
	
	indexPath
		IndexPath is the collection path in Firestore that identifies an Index.
	
	"""

	def __init__(self):
		self.indexPath = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class GetIndexResponse:
	"""GetIndexResponse is the output object for GetIndex.
	Attributes
	----------
	
	index
		Index is the Index that was created.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.index = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class GetIndexesRequest:
	"""GetIndexesRequest is the input object for GetIndexes.
	Attributes
	----------
	
	"""

	def __init__(self):
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class GetIndexesResponse:
	"""GetIndexesResponse is the output object for GetIndexes.
	Attributes
	----------
	
	indexes
		Indexes are the indexes managed by this service.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.indexes = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class Highlight:
	"""Highlight describes an area that specifically matches a search query.
	Attributes
	----------
	
	field
		Field is the name of the field.
	
	text
		Text is the highlighted text.
	
	"""

	def __init__(self):
		self.field = None
		self.text = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class PutDocRequest:
	"""PutDocRequest is the input object for PutDoc.
	Attributes
	----------
	
	indexPath
		IndexPath is the Index to put a document to.
	
	doc
		Doc is the document to put.
	
	"""

	def __init__(self):
		self.indexPath = None
		self.doc = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class PutDocResponse:
	"""PutDocResponse is the output object for PutDoc.
	Attributes
	----------
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class SearchQuery:
	"""SearchQuery describes a search query.
	Attributes
	----------
	
	indexPath
		IndexPath is the path of the index to search.
	
	accessKey
		AccessKey authenticates the request. Get an AccessKey from the AccessKeyService.GenerateKey method.
	
	limit
		Limit is the maximum number of search results to return. Smaller limits are faster.
	
	text
		Text contains a phrase to search for.
	
	filters
		Filters are a list of where filters to apply when performing the search.
	
	select
		Select lists the fields to get from the document. Filters are automatically included. To get search fields out, they must have been put with store set to true.
	
	searchFields
		SearchFields is a list of fields to search. If empty, all fields will be searched.
	
	cursor
		Cursor is a encoded string from a previous Query, that you can use to get more results.
	
	"""

	def __init__(self):
		self.indexPath = None
		self.accessKey = None
		self.limit = None
		self.text = None
		self.filters = None
		self.select = None
		self.searchFields = None
		self.cursor = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class SearchRequest:
	"""SearchRequest is the input object for Search.
	Attributes
	----------
	
	query
		Query is the SearchQuery to perform.
	
	"""

	def __init__(self):
		self.query = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class SearchResult:
	"""SearchResult is a document that matches a search query.
	Attributes
	----------
	
	id
		ID is the document identifier.
	
	fields
		Fields are the selected fields for this document.
	
	highlights
		Highlights describe areas within the text that specifically match the query.
	
	score
		Score is a relative value for this query. Higher score is better.
	
	"""

	def __init__(self):
		self.id = None
		self.fields = None
		self.highlights = None
		self.score = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)


class SearchResponse:
	"""SearchResponse is the output object for Search.
	Attributes
	----------
	
	query
		Query is the SearchQuery that generated these results.
	
	hits
		Hits are the search results.
	
	duration
		Duration is the milliseconds that the search took to execute in the server side
	
	cursor
		Cursor is a encoded string that you can pass to a new Query to get more results.
	
	more
		More indicates that there may be more search results. If true, make the same Search request passing this Cursor. For performance reasons, Firesearch doesn't always know with certainty so it's possible the subsequent request will return no results.
	
	error
		Error is string explaining what went wrong. Empty if everything was fine.
	
	"""

	def __init__(self):
		self.query = None
		self.hits = None
		self.duration = None
		self.cursor = None
		self.more = None
		self.error = None
			
	def json():
		""""get a JSON representation of this object"""
		return json.puts(self)



class Error(Exception):
	"""Base class for exceptions in this module."""
	pass

class OtoError(Error):
	"""Exception raised for an error making the request.

	Attributes:
		message -- explanation of the error
	"""

	def __init__(self, message):
		self.message = message

class FieldError(Error):
	"""Exception raised for missing fields.

	Attributes:
		field -- field which the error occurred
		message -- explanation of the error
	"""

	def __init__(self, field, message):
		self.field = field
		self.message = message