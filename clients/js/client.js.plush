// Code generated by oto; DO NOT EDIT.

'use strict';

const firesearch = {}
firesearch.Client = function(host) {
	this.host = host || ''
	this.getHeaders = function() {
		return {}
	}
	this.fetch = null
}

<%= for (service) in def.Services { %>
<%= format_comment_text(service.Comment) %>firesearch.<%= service.Name %> = function(client) {
	this.client = client
}

<%= for (method) in service.Methods { %>
firesearch.<%= service.Name %>.prototype.<%= method.NameLowerCamel %> = async function(<%= camelize_down(method.InputObject.TypeName) %>) {
	let headers = this.client.getHeaders();
	headers['Accept'] = 'application/json';
	headers['Content-Type'] = 'application/json';
	if (!this.client.fetch) {
		throw new Error(`firesearch: <%= service.Name %>.<%= method.Name %>: no fetch (try client.fetch = window.fetch.bind(window))`)
	}
	const response = await this.client.fetch(this.client.host + '/api/<%= service.Name %>.<%= method.Name %>', {
		method: 'POST',
		headers: headers,
		body: JSON.stringify(<%= camelize_down(method.InputObject.TypeName) %>),
	})
	if (response.status !== 200) {
		throw new Error(`firesearch: <%= service.Name %>.<%= method.Name %>: ${response.status} ${response.statusText}`);
	}
	return response.json().then(json => {
		if (json.error) {
			throw new Error('firesearch: ' + json.error);
		}
		return json;
	})	
}
<% } %>
<% } %>
