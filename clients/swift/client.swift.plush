//  Code generated by oto; DO NOT EDIT.

import Foundation

class OtoClient {
	var endpoint: String
	init(withEndpoint url: String) {
		self.endpoint = url
	}
}

<%= for (service) in def.Services { %>
<%= format_comment_text(service.Comment) %>class <%= service.Name %> {
	var client: OtoClient
	init(withClient client: OtoClient) {
		self.client = client
	}
<%= for (method) in service.Methods { %>
	<%= format_comment_text(method.Comment) %>	func <%= camelize_down(method.Name) %>(withRequest <%= camelize_down(method.InputObject.TypeName) %>: <%= method.InputObject.TypeName %>, completion: @escaping (_ response: <%= method.OutputObject.TypeName %>?, _ error: Error?) -> ()) {
		let url = "\(self.client.endpoint)/<%= service.Name %>.<%= method.Name %>"
		var request = URLRequest(url: URL(string: url)!)
		request.httpMethod = "POST"
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Content-Type")
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Accept")
		var jsonData: Data
		do {
			jsonData = try JSONEncoder().encode(<%= camelize_down(method.InputObject.TypeName) %>)
		} catch let err {
			completion(nil, err)
			return
		}
		request.httpBody = jsonData
		let session = URLSession(configuration: URLSessionConfiguration.default)
		let task = session.dataTask(with: request) { (data, response, error) in
			if let err = error {
				completion(nil, err)
				return
			}
            if let httpResponse = response as? HTTPURLResponse {
                if (httpResponse.statusCode != 200) {
                    let err = OtoError("\(url): \(httpResponse.statusCode) status code")
                    completion(nil, err)
                    return
                }
            }
			var <%= camelize_down(method.OutputObject.TypeName) %>: <%= method.OutputObject.TypeName %>
			do {
				<%= camelize_down(method.OutputObject.TypeName) %> = try JSONDecoder().decode(<%= method.OutputObject.TypeName %>.self, from: data!)
			} catch let err {
				completion(nil, err)
				return
			}
			completion(<%= camelize_down(method.OutputObject.TypeName) %>, nil)
		}
		task.resume()
	}
<% } %>
}
<% } %>

<%= for (object) in def.Objects { %>
<%= format_comment_text(object.Comment) %>struct <%= object.Name %>: Encodable, Decodable {
<%= for (field) in object.Fields { %>
	<%= format_comment_text(field.Comment) %>	var <%= camelize_down(field.Name) %>: <%= field.Type.SwiftType %>?
<% } %>
}
<% } %>

struct OtoError: LocalizedError
{
    var errorDescription: String? { return message }
    var failureReason: String? { return message }
    var recoverySuggestion: String? { return "" }
    var helpAnchor: String? { return "" }

    private var message : String

    init(_ description: String) {
        message = description
    }
}