//  Code generated by oto; DO NOT EDIT.

import Foundation

class Client {
	var endpoint: String
	init(withEndpoint url: String) {
		self.endpoint = url
	}
}

<%= for (service) in def.Services { %>
<%= format_comment_text(service.Comment) %>class <%= service.Name %> {
	var client: Client
	init(withClient client: Client) {
		self.client = client
	}
<%= for (method) in service.Methods { %>
	<%= format_comment_text(method.Comment) %>	func <%= camelize_down(method.Name) %>(withRequest <%= camelize_down(method.InputObject.TypeName) %>: <%= method.InputObject.TypeName %>, completion: @escaping (_ response: <%= method.OutputObject.TypeName %>?, _ error: Error?) -> ()) {
		let url = "\(self.client.endpoint)/<%= service.Name %>.<%= method.Name %>"
		var request = URLRequest(url: URL(string: url)!)
		request.httpMethod = "POST"
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Content-Type")
		request.addValue("application/json; charset=utf-8", forHTTPHeaderField: "Accept")
		var jsonData: Data
		do {
			jsonData = try JSONEncoder().encode(<%= camelize_down(method.InputObject.TypeName) %>)
		} catch let err {
			completion(nil, err)
			return
		}
		request.httpBody = jsonData
		let session = URLSession(configuration: URLSessionConfiguration.default)
		let task = session.dataTask(with: request) { (data, response, error) in
			if let err = error {
				completion(nil, err)
				return
			}
			if let httpResponse = response as? HTTPURLResponse {
				if (httpResponse.statusCode != 200) {
					let err = OtoError("\(url): \(httpResponse.statusCode) status code")
					completion(nil, err)
					return
				}
			}
			var <%= camelize_down(method.OutputObject.TypeName) %>: <%= method.OutputObject.TypeName %>
			do {
				<%= camelize_down(method.OutputObject.TypeName) %> = try JSONDecoder().decode(<%= method.OutputObject.TypeName %>.self, from: data!)
			} catch let err {
				completion(nil, err)
				return
			}
			if <%= camelize_down(method.OutputObject.TypeName) %>.error != nil {
				let err = OtoError("\(url): \(<%= camelize_down(method.OutputObject.TypeName) %>.error!)")
				completion(nil, err)
				return
			}
			completion(<%= camelize_down(method.OutputObject.TypeName) %>, nil)
		}
		task.resume()
	}
<% } %>
}
<% } %>

<%= for (object) in def.Objects { %>
<%= format_comment_text(object.Comment) %>struct <%= object.Name %>: Codable {
<%= for (field) in object.Fields { %>
	<%= format_comment_text(field.Comment) %>	var <%= camelize_down(field.Name) %>: <%= if (field.Type.Multiple) { %>[<% } %><%= if (field.Type.IsObject) { %><%= field.Type.TypeName %><% } else { %> <%= if (field.Type.SwiftType == "Any") { %>AnyCodable<% } else { %><%= field.Type.SwiftType %><% } %><% } %><%= if (field.Type.Multiple) { %>]<% } %>?
<% } %>
}
<% } %>

struct OtoError: LocalizedError
{
	var errorDescription: String? { return message }
	var failureReason: String? { return message }
	var recoverySuggestion: String? { return "" }
	var helpAnchor: String? { return "" }

	private var message : String

	init(_ description: String) {
		message = description
	}
}

struct AnyCodable: Decodable {
  var value: Any

  struct CodingKeys: CodingKey {
    var stringValue: String
    var intValue: Int?
    init?(intValue: Int) {
      self.stringValue = "\(intValue)"
      self.intValue = intValue
    }
    init?(stringValue: String) { self.stringValue = stringValue }
  }

  init(value: Any) {
    self.value = value
  }

  init(from decoder: Decoder) throws {
    if let container = try? decoder.container(keyedBy: CodingKeys.self) {
      var result = [String: Any]()
      try container.allKeys.forEach { (key) throws in
        result[key.stringValue] = try container.decode(AnyCodable.self, forKey: key).value
      }
      value = result
    } else if var container = try? decoder.unkeyedContainer() {
      var result = [Any]()
      while !container.isAtEnd {
        result.append(try container.decode(AnyCodable.self).value)
      }
      value = result
    } else if let container = try? decoder.singleValueContainer() {
      if let intVal = try? container.decode(Int.self) {
        value = intVal
      } else if let doubleVal = try? container.decode(Double.self) {
        value = doubleVal
      } else if let boolVal = try? container.decode(Bool.self) {
        value = boolVal
      } else if let stringVal = try? container.decode(String.self) {
        value = stringVal
      } else {
        throw DecodingError.dataCorruptedError(in: container, debugDescription: "the container contains nothing serialisable")
      }
    } else {
      throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Could not serialise"))
    }
  }
}

extension AnyCodable: Encodable {
  func encode(to encoder: Encoder) throws {
    if let array = value as? [Any] {
      var container = encoder.unkeyedContainer()
      for value in array {
        let decodable = AnyCodable(value: value)
        try container.encode(decodable)
      }
    } else if let dictionary = value as? [String: Any] {
      var container = encoder.container(keyedBy: CodingKeys.self)
      for (key, value) in dictionary {
        let codingKey = CodingKeys(stringValue: key)!
        let decodable = AnyCodable(value: value)
        try container.encode(decodable, forKey: codingKey)
      }
    } else {
      var container = encoder.singleValueContainer()
      if let intVal = value as? Int {
        try container.encode(intVal)
      } else if let doubleVal = value as? Double {
        try container.encode(doubleVal)
      } else if let boolVal = value as? Bool {
        try container.encode(boolVal)
      } else if let stringVal = value as? String {
        try container.encode(stringVal)
      } else {
        throw EncodingError.invalidValue(value, EncodingError.Context.init(codingPath: [], debugDescription: "The value is not encodable"))
      }

    }
  }
}

extension SearchResult {
	func valueField(key: String) -> (Any?) {
        let field = self.fields?.first(where: { (field: Field) -> Bool in
            return field.key == key
        })
		if field == nil {
			return nil
		}
		if field!.value == nil {
			return nil
		}
		return field!.value!.value
	}
}
